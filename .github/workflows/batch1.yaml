name: CI Pipeline

on:
  pull_request:
    branches:
      - main

defaults:
  run:
    shell: bash

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to the runner
    - name: Checkout repository
      uses: actions/checkout@v2

    # Set up Go environment
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.20

    # Ensure go.mod exists in the codegen directory
    - name: Ensure go.mod exists
      run: |
        cd codegen
        if [ ! -f go.mod ]; then
          go mod init example.com/m
        fi

    # Run Go tests
    - name: Test
      run: cd codegen && go test -v ./...

  semgrep:
    runs-on: ubuntu-latest
    needs: [test]

    steps:
    # Checkout the repository to the runner
    - name: Checkout repository
      uses: actions/checkout@v3

    # Scan the code with Semgrep using default rulesets
    - name: Scan with Semgrep
      run: |
        echo "Running Semgrep scan..."
        docker run --rm -v ${{ github.workspace }}:/src returntocorp/semgrep semgrep --config=p/security-audit --config=p/secrets --config=p/ci --config=p/sqli --error --json > semgrep_results.json

    # Print Semgrep results for debugging
    - name: Print Semgrep results
      run: cat semgrep_results.json

    # Post Semgrep results as a comment on the pull request
    - name: Post Semgrep results as a comment
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const results = JSON.parse(fs.readFileSync('semgrep_results.json', 'utf8'));

          let commentBody = '## Semgrep Scan Results\n\n';
          if (results.results.length > 0) {
            results.results.forEach(result => {
              commentBody += `### ${result.check_id}\n`;
              commentBody += `**Reason:** ${result.extra.message}\n\n`;
            });
          } else {
            commentBody += 'No vulnerabilities found.';
          }

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: commentBody
          });

  build:
    runs-on: ubuntu-latest
    needs: [semgrep]

    steps:
    # Checkout the repository to the runner
    - name: Checkout repository
      uses: actions/checkout@v2

    # List all files in the repository for debugging purposes
    - name: List files for debugging
      run: ls -R

    # List all files in the codegen directory for debugging purposes
    - name: List files in codegen directory
      run: ls -R codegen

    # Verify that the Dockerfile exists in the codegen directory
    - name: Verify Dockerfile exists
      run: |
        if [ ! -f codegen/Dockerfile ]; then
          echo "Dockerfile not found!"
          exit 1
        fi

    # Configure AWS credentials for pushing the Docker image to ECR
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Login to Amazon ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # Build, tag, and push the Docker image to Amazon ECR
    - name: Build, tag, and push docker image to Amazon ECR
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        IMAGE_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}"
        docker build -t $IMAGE_URI -f codegen/Dockerfile codegen
        docker push $IMAGE_URI