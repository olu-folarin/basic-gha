name: CI Pipeline

on:
  pull_request:
    branches:
      - main

env:
  GITHUB_WORKSPACE: ${{ github.workspace }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  IMAGE_TAG: ${{ github.sha }}

permissions:
  contents: read
  security-events: read
  issues: write
  pull-requests: write

defaults:
  run:
    shell: bash

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Set up Go environment
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'
    - name: Ensure go.mod exists
      run: |
        cd codegen
        if [ ! -f go.mod ]; then
          go mod init example.com/m
        fi
    - name: Install dependencies
      run: cd codegen && go mod tidy
    - name: Run Go tests
      run: cd codegen && go test -v ./...

  gitleaks:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Run Gitleaks
      run: |
        echo "Running Gitleaks scan..."
        docker run --rm -v $GITHUB_WORKSPACE:/workspace zricethezav/gitleaks:latest detect --source /workspace --report-format json --report-path /workspace/gitleaks_results.json
    - name: Check Gitleaks results
      run: |
        if [ -s gitleaks_results.json ]; then
          echo "Gitleaks found secrets. Failing the job."
          exit 1
        fi
    - name: Post Gitleaks results as a comment
      if: always()
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          let results;
          try {
            results = JSON.parse(fs.readFileSync('gitleaks_results.json', 'utf8'));
          } catch (error) {
            console.error('Error parsing Gitleaks results:', error);
            return;
          }
          let commentBody = '## Gitleaks Scan Results\n\n';
          if (results.length > 0) {
            results.forEach(result => {
              commentBody += `### Secret found in ${result.File}\n`;
              commentBody += `**Line:** ${result.StartLine}\n`;
              commentBody += `**Rule:** ${result.Rule}\n\n`;
            });
          } else {
            commentBody += 'No secrets found.';
          }
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: commentBody
          });

  semgrep:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Scan with Semgrep
      run: |
        echo "Running Semgrep scan..."
        docker run --rm -v $GITHUB_WORKSPACE:/src returntocorp/semgrep:latest semgrep --config=auto --config=p/security-audit --config=p/secrets --config=p/ci --json > semgrep_results.json
    - name: Check Semgrep results
      run: |
        if jq -e '.results | length > 0' semgrep_results.json > /dev/null; then
          echo "Semgrep found vulnerabilities. Failing the job."
          exit 1
        fi
    - name: Post Semgrep results as a comment
      if: always()
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          let results;
          try {
            results = JSON.parse(fs.readFileSync('semgrep_results.json', 'utf8'));
          } catch (error) {
            console.error('Error parsing Semgrep results:', error);
            return;
          }
          let commentBody = '## Semgrep Scan Results\n\n';
          if (results.results && results.results.length > 0) {
            results.results.forEach(result => {
              commentBody += `### ${result.check_id}\n`;
              commentBody += `**Reason:** ${result.extra.message}\n\n`;
              commentBody += `**File:** ${result.path}\n`;
              commentBody += `**Line:** ${result.start.line}\n\n`;
            });
          } else {
            commentBody += 'No vulnerabilities found.';
          }
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: commentBody
          });

  dependabot:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Fetch Dependabot alerts
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
             -H "Accept: application/vnd.github.v3+json" \
             "https://api.github.com/repos/${{ github.repository }}/dependabot/alerts")
        echo "$response" > dependabot_alerts.json
    - name: Check Dependabot alerts
      run: |
        if jq -e 'length > 0' dependabot_alerts.json > /dev/null; then
          echo "Dependabot found alerts. Failing the job."
          exit 1
        fi
    - name: Post Dependabot results as a comment
      if: always()
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          let alerts;
          try {
            alerts = JSON.parse(fs.readFileSync('dependabot_alerts.json', 'utf8'));
          } catch (error) {
            console.error('Error parsing Dependabot alerts:', error);
            return;
          }
          let commentBody = '## Dependabot Alerts\n\n';
          if (alerts.length > 0) {
            alerts.forEach(alert => {
              commentBody += `### ${alert.security_advisory.summary}\n`;
              commentBody += `**Severity:** ${alert.security_advisory.severity}\n\n`;
              commentBody += `**Package:** ${alert.dependency.package.name}\n`;
              commentBody += `**Version:** ${alert.dependency.version}\n\n`;
              commentBody += `**Manifest Path:** ${alert.dependency.manifest_path}\n\n`;
            });
          } else {
            commentBody += 'No Dependabot alerts found.';
          }
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: commentBody
          });

  build:
    runs-on: ubuntu-latest
    needs: [gitleaks, semgrep, dependabot]
    if: ${{ needs.gitleaks.result == 'success' && needs.semgrep.result == 'success' && needs.dependabot.result == 'success' }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Verify Dockerfile exists
      run: |
        if [ ! -f codegen/Dockerfile ]; then
          echo "Dockerfile not found!"
          exit 1
        fi
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    - name: Build, tag, and push docker image to Amazon ECR
      run: |
        IMAGE_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}"
        docker build -t $IMAGE_URI -f codegen/Dockerfile codegen
        docker push $IMAGE_URI
