name: CI Pipeline - Test Change

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  GITHUB_WORKSPACE: ${{ github.workspace }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: test-push-image
  IMAGE_TAG: ${{ github.sha }}
  CODEGEN_DIR: codegen

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v4
      with:
        go-version: '1.22.7'
    - name: Run tests
      working-directory: ${{ env.CODEGEN_DIR }}
      run: |
        if [ ! -f go.mod ]; then
          go mod init example.com/m
        fi
        go mod tidy
        go test -v ./...

  gitleaks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install Gitleaks
      run: |
        curl -sSL https://github.com/zricethezav/gitleaks/releases/download/v8.2.7/gitleaks_8.2.7_linux_x64.tar.gz | tar -xz -C /usr/local/bin gitleaks
    - name: Run Gitleaks
      run: |
        gitleaks detect --source=codegen --verbose --report-format=json --report-path=gitleaks_results.json --config=.github/workflows/gitleaks.toml --no-git || true
        if [ -s gitleaks_results.json ]; then
          echo "::warning::Gitleaks found potential secrets"
          echo "SCAN_FAILED=true" >> $GITHUB_ENV

  semgrep:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install Semgrep
      run: |
        pip install semgrep
    - name: Run Semgrep
      run: |
        semgrep --config=.github/workflows/semgrep.yml --json --output=semgrep_results.json codegen/
      continue-on-error: true
    - name: Log Semgrep Results
      run: |
        cat semgrep_results.json | jq -r '.results[] | "File: \(.path)\nLine: \(.start.line)\nMessage: \(.extra.message)\nSeverity: \(.extra.severity)\n"' || true
    - name: Analyze Semgrep Results
      if: always()
      run: |
        if jq -e '.results | length > 0' semgrep_results.json > /dev/null; then
          echo "::error::Semgrep found security issues"
          echo "SCAN_FAILED=true" >> $GITHUB_ENV
          exit 1
        fi

  dependabot:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v4
      with:
        go-version: '1.22.7'
    - name: Get Dependabot alerts
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/dependabot/alerts")
        
        if echo "$response" | jq -e 'has("message")' > /dev/null; then
          echo "::warning::Error accessing Dependabot alerts: $(echo "$response" | jq -r '.message')"
          echo "[]" > dependabot_alerts.json
        else
          echo "$response" > dependabot_alerts.json
          
          if echo "$response" | jq -e 'length > 0' > /dev/null; then
            echo "::error::Found Dependabot security alerts"
            echo "SCAN_FAILED=true" >> $GITHUB_ENV
            exit 1
    - name: Analyze dependencies
      working-directory: ${{ env.CODEGEN_DIR }}
      run: |
        if [ ! -f go.mod ]; then
          go mod init example.com/m
        fi
        go mod tidy
        go mod download
        go list -json -m all > ../go_modules.json

  build-image:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image_name: my-local-image:latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Build Docker image
      run: |
        docker build -t my-local-image:latest -f codegen/Dockerfile codegen
    - name: Save image name
      id: save-image-name
      run: echo "IMAGE_NAME=my-local-image:latest" >> $GITHUB_ENV

  trivy:
    needs: build-image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
    - uses: actions/checkout@v3
    - name: Install Trivy
      run: |
        sudo apt-get update -y
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb focal main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update -y
        sudo apt-get install -y trivy
    - name: Run Trivy Vulnerability Scanner
      run: |
        IMAGE_NAME="${{ needs.build-image.outputs.image_name }}"
        echo "Scanning image: $IMAGE_NAME"
        trivy image --format sarif -o trivy-results.sarif "$IMAGE_NAME"
    - name: Debug Trivy Execution
      run: |
        echo "Inspecting SARIF output..."
        ls -la
        cat trivy-results.sarif || echo "SARIF file not found."
    - name: Upload Trivy Scan Results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-results.sarif