name: CI Pipeline

on:
  schedule:
    - cron: '0 0 * * 1'  # Weekly on Monday
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  repository_dispatch:
    types: [dependabot]

env:
  GITHUB_WORKSPACE: ${{ github.workspace }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: test-push-image
  IMAGE_TAG: ${{ github.sha }}
  CODEGEN_DIR: codegen
  GITHUB_TOKEN: ${{ secrets.PAT_FOR_WORKFLOW }}

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v4
      with:
        go-version: '1.22.7'
    - name: Update Dependencies
      working-directory: ${{ env.CODEGEN_DIR }}
      run: go mod tidy
    - name: Build Project
      working-directory: ${{ env.CODEGEN_DIR }}
      run: go build
    - name: Run tests
      working-directory: ${{ env.CODEGEN_DIR }}
      run: go test -v ./...

  gitleaks:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
    - uses: actions/checkout@v3
    - name: Install Gitleaks
      run: |
        curl -sSL https://github.com/zricethezav/gitleaks/releases/download/v8.2.7/gitleaks_8.2.7_linux_x64.tar.gz | tar -xz -C /usr/local/bin gitleaks
    - name: Run Gitleaks
      run: |
        gitleaks detect --source=codegen --verbose --report-format=sarif --report-path=gitleaks_results.sarif --config=.github/workflows/gitleaks.toml --no-git
        if [ -s gitleaks_results.sarif ]; then
          echo "::warning::Gitleaks found potential secrets"
          echo "SCAN_FAILED=true" >> $GITHUB_ENV
        fi
    - name: Upload Gitleaks SARIF Report
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gitleaks_results.sarif

  semgrep:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
    - uses: actions/checkout@v3
    - name: Install Semgrep
      run: |
        pip install semgrep
    - name: Run Semgrep
      run: |
        semgrep --config=.github/workflows/semgrep.yml --sarif --output=semgrep_results.sarif codegen/
      continue-on-error: false
    - name: Log Semgrep Results
      run: |
        cat semgrep_results.sarif || echo "SARIF file not found."
    - name: Analyze Semgrep Results
      if: always()
      run: |
        if jq -e '.runs[0].results | length > 0' semgrep_results.sarif > /dev/null; then
          echo "::error::Semgrep found security issues"
          echo "SCAN_FAILED=true" >> $GITHUB_ENV
          exit 1
        fi
    - name: Upload Semgrep SARIF Report
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: semgrep_results.sarif

  build-image:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}
    steps:
    - uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
    - name: Build Docker image
      id: build
      run: |
        IMAGE_TAG="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest"
        docker build -t $IMAGE_TAG -f codegen/Dockerfile codegen
        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

  trivy:
    needs: build-image
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install Trivy
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.47.0
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Build image
      uses: docker/build-push-action@v4
      with:
        context: .
        load: true
        tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    - name: Scan Docker image
      run: |
        trivy image \
          --exit-code 1 \
          --severity HIGH,CRITICAL \
          --format table \
          --output trivy-results.txt \
          --timeout 10m \
          --no-progress \
          ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

  push-to-ecr:
    needs: trivy
    runs-on: ubuntu-latest
    if: success()
    steps:
    - uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
    - name: Push Docker image to ECR
      run: |
        docker push ${{ needs.build-image.outputs.image_tag }}