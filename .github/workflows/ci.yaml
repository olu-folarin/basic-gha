name: CI Pipeline - Test Change

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  GITHUB_WORKSPACE: ${{ github.workspace }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: test-push-image
  IMAGE_TAG: ${{ github.sha }}
  CODEGEN_DIR: codegen

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v4
      with:
        go-version: '1.22.7'
    - name: Run tests
      working-directory: ${{ env.CODEGEN_DIR }}
      run: |
        if [ ! -f go.mod ]; then
          go mod init example.com/m
        fi
        go mod tidy
        go test -v ./...

  gitleaks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Run Gitleaks
      run: |
        docker run --rm -v ${{ github.workspace }}:/workspace zricethezav/gitleaks:latest detect \
          --source /workspace/codegen \
          --report-format json \
          --report-path /workspace/gitleaks_results.json
        
        if [ -s gitleaks_results.json ]; then
          echo "::warning::Gitleaks found potential secrets"
          echo "SCAN_FAILED=true" >> $GITHUB_ENV
        fi
    - name: Post results
      if: always()
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          let results = [];
          try {
            results = JSON.parse(fs.readFileSync('gitleaks_results.json', 'utf8'));
          } catch (error) {} 
          
          const comment = `## Gitleaks Security Scan Results
          ${results.length ? '‚ö†Ô∏è **Secrets Found**' : '‚úÖ **No Secrets Found**'}
          
          ${results.map(r => `
          ### Secret detected in \`${r.File}\`
          - **Location**: Line ${r.StartLine}
          - **Rule Violated**: ${r.Rule}
          - **Description**: ${r.Description || 'Potential secret or credential found'}
          - **Recommendation**: Remove the secret and store it securely in environment variables or a secrets manager
          - **Matched Content**: \`${r.Match}\`
          
          `).join('\n')}
          
          ${results.length ? '### üîí Best Practices\n' +
          '- Never commit secrets, credentials or sensitive data\n' +
          '- Use environment variables or secret management tools\n' +
          '- Add sensitive patterns to .gitignore\n' +
          '- Consider using pre-commit hooks to prevent secret commits' : ''}`;
          
          await github.rest.issues.createComment({
            ...context.repo,
            issue_number: context.issue.number,
            body: comment
          });

  semgrep:
    runs-on: ubuntu-latest 
    steps:
    - uses: actions/checkout@v3
    - name: Run Semgrep
      id: scan
      run: |
        docker run --rm -v ${{ github.workspace }}:/src returntocorp/semgrep:latest \
          semgrep scan \
          --config=auto \
          --config=p/security-audit \
          --config=p/secrets \
          --config=p/ci \
          --include="codegen/**/*.go" \
          --include="codegen/go.mod" \
          --include="codegen/go.sum" \
          --json > semgrep_results.json
        
        if jq -e '.results | length > 0' semgrep_results.json > /dev/null; then
          echo "::error::Semgrep found security issues"
          echo "SCAN_FAILED=true" >> $GITHUB_ENV
          exit 1
        fi
    - name: Post results  
      if: always()
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          let results = {results:[]};
          try {
            results = JSON.parse(fs.readFileSync('semgrep_results.json', 'utf8'));
          } catch (error) {}
          
          const comment = `## Semgrep Security Scan Results
          ${results.results.length ? '‚ö†Ô∏è **Security Issues Found**' : '‚úÖ **No Security Issues Found**'}
          
          ${results.results.map(r => `
          ### ${r.check_id}
          - **File**: \`${r.path}\`
          - **Line**: ${r.start.line}
          - **Issue**: ${r.extra.message}
          - **Impact**: ${r.extra.metadata?.impact || 'Potential security vulnerability'}
          - **Confidence**: ${r.extra.metadata?.confidence || 'Unknown'}
          
          **Description**:
          ${r.extra.metadata?.description || r.extra.message}
          
          **Recommendation**:
          ${r.extra.metadata?.fix || 'Review and fix the identified security issue according to best practices'}
          
          `).join('\n')}
          
          ${results.results.length ? '### üõ°Ô∏è Best Practices\n' +
          '- Follow secure coding guidelines\n' +
          '- Implement proper input validation\n' +
          '- Use security-focused code reviews\n' +
          '- Keep security dependencies updated' : ''}`;
          
          await github.rest.issues.createComment({
            ...context.repo,
            issue_number: context.issue.number,
            body: comment
          });

  dependabot:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v4
      with:
        go-version: '1.22.7'
    - name: Get Dependabot alerts
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/dependabot/alerts")
        
        if echo "$response" | jq -e 'has("message")' > /dev/null; then
          echo "::warning::Error accessing Dependabot alerts: $(echo "$response" | jq -r '.message')"
          echo "[]" > dependabot_alerts.json
        else
          echo "$response" > dependabot_alerts.json
          
          if echo "$response" | jq -e 'length > 0' > /dev/null; then
            echo "::error::Found Dependabot security alerts"
            echo "SCAN_FAILED=true" >> $GITHUB_ENV
            exit 1
          fi
        fi
    - name: Analyze dependencies
      working-directory: ${{ env.CODEGEN_DIR }}
      run: |
        if [ ! -f go.mod ]; then
          go mod init example.com/m
        fi
        go mod tidy
        go mod download
        go list -json -m all > ../go_modules.json
    - name: Post results
      if: always()
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          let alerts = [];
          let modules = {};
          
          try {
            const content = fs.readFileSync('dependabot_alerts.json', 'utf8');
            alerts = JSON.parse(content);
            if (!Array.isArray(alerts)) alerts = [];
            
            const modulesContent = fs.readFileSync('go_modules.json', 'utf8');
            modules = JSON.parse(modulesContent);
          } catch (error) {
            console.error('Error parsing results:', error);
          }
          
          const comment = `## Dependabot Security Scan Results
          ${alerts.length ? '‚ö†Ô∏è **Vulnerabilities Found**' : '‚úÖ **No Vulnerabilities Found**'}
          
          ${alerts.map(alert => `
          ### ${alert.security_advisory?.summary || 'Unknown Vulnerability'}
          - **File**: \`${alert.dependency?.manifest_path || 'go.mod'}\`
          - **Package**: ${alert.dependency?.package?.name || 'Unknown'} (version ${alert.dependency?.version || 'Unknown'})
          - **Severity**: ${alert.security_advisory?.severity || 'Unknown'}
          - **CVSS Score**: ${alert.security_advisory?.cvss?.score || 'N/A'}
          - **Vulnerable Requirements**: ${alert.security_advisory?.vulnerableVersionRange || 'Unknown'}
          
          **Description**:
          ${alert.security_advisory?.description || 'No description available'}
          
          **Recommendation**:
          ${alert.security_advisory?.references?.[0]?.url ? 
          `- Review the advisory: ${alert.security_advisory.references[0].url}\n` : ''}
          - Update to ${alert.security_advisory?.patched_versions?.[0] || 'the latest version'}
          - Run \`go get -u ${alert.dependency?.package?.name}@latest\`
          
          `).join('\n')}
          
          ### üì¶ Current Dependencies
          ${modules.Deps ? `Found ${modules.Deps.length} dependencies\n` : 'No dependency information available'}
          
          ### üõ°Ô∏è Best Practices
          - Regularly update dependencies with \`go get -u\` and \`go mod tidy\`
          - Review security advisories
          - Use dependency lockfiles
          - Enable Dependabot security updates
          - Set up automated dependency updates`;
          
          await github.rest.issues.createComment({
            ...context.repo,
            issue_number: context.issue.number,
            body: comment
          });

  build-image:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.save-image-name.outputs.IMAGE_NAME }}
    steps:
    - uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Test AWS CLI
      run: |
        aws sts get-caller-identity
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - name: Build, tag, and push image to ECR
      env:
        LOCAL_IMAGE: "my-local-image"
        ECR_IMAGE: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test-push-image:${{ env.IMAGE_TAG }}"
      run: |
        echo "ECR_IMAGE: $ECR_IMAGE"
        docker build -t $LOCAL_IMAGE -f codegen/Dockerfile codegen
        docker tag $LOCAL_IMAGE $ECR_IMAGE
        docker push $ECR_IMAGE

  trivy:
    needs: build-image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
    - uses: actions/checkout@v3
    - name: Build image for scanning
      run: |
        IMAGE_NAME="${{ needs.build-image.outputs.image_name }}"
        docker build -t $IMAGE_NAME -f ${{ env.CODEGEN_DIR }}/Dockerfile ${{ env.CODEGEN_DIR }}
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ needs.build-image.outputs.image_name }}'
        exit-code: '1'
        ignore-unfixed: true
        scanners: 'vuln'
        vuln-type: 'os,library'
        format: 'table'  # Add table format for debugging
        severity: 'CRITICAL,HIGH'
    - name: Run Trivy with SARIF output
      uses: aquasecurity/trivy-action@master
      if: always()  # Run even if previous step fails
      with:
        image-ref: '${{ needs.build-image.outputs.image_name }}'
        exit-code: '0'  # Don't fail on this step
        ignore-unfixed: true
        scanners: 'vuln'
        vuln-type: 'os,library'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
    - name: Upload Trivy scan results to GitHub Security tab
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  push-image:
    needs: [gitleaks, semgrep, dependabot, trivy]
    runs-on: ubuntu-latest
    if: |
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.outputs.SCAN_FAILED, 'true')
    steps:
    - uses: actions/checkout@v3
    - uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - uses: aws-actions/amazon-ecr-login@v2
      id: login-ecr
    - name: Tag and push image
      run: |
        # Get local image name
        LOCAL_IMAGE="${{ needs.build-image.outputs.image_name }}"
        # Create ECR image name
        ECR_IMAGE="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/test-push-image:${{ env.IMAGE_TAG }}"
        # Build image again (since jobs are isolated)
        docker build -t $LOCAL_IMAGE -f ${{ env.CODEGEN_DIR }}/Dockerfile ${{ env.CODEGEN_DIR }}
        # Tag for ECR
        docker tag $LOCAL_IMAGE $ECR_IMAGE
        # Push to ECR
        docker push $ECR_IMAGE